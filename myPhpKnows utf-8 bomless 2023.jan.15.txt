ответы на это: https://habr.com/ru/sandbox/151396/

to jun
1 если в двух словах - ярлыки переменных
2 не пользовался ссылками
3 помню про текс, int numbers, float numbers, objects
4 унарный оператор модификации переменной. в порядке исполнения. постфикс изменяет, и после отдает результат изменения, префикс отдает исходное содержимое переменной а после меняет его
5 функция вызывает сама себя, точнее не скажу ибо так и не дошли руки разобраться.
6 присвоение(замена содержимого), простое сравнение, тождественное сравнение(проверяется как значение так и тип переменной)
7 эм... принципы?
8 динамика, +удобство, нет нужды указывать типы данных для минимального запуска кода. -отсутствие указанний типов для многих превращается в ад, особенно при возвращении к давно забытому своему проекту и\или переходе к чужому.
9 инклуд - вставка результата исполнения кода, реквайр - вставка кода и после его исполнение, mysql_connect - соединение с БД, pconnect - хз, вроде не сталкивался даже.
10, 11, 12. хз
13 помню статик, приват и паблик
14 что-то связанное с экранированием спец. символов примоминаю
15 с генераторами знаком через призму js, те же функция только с yield вместо return
16 возвращает значение(как и return) но с сохранением прогресса в функции. т.е. (v=1){return v++} тут всегда выдаст 2, (v=1){yield v++} а тут возвращаемое значение будет расти при каждом следующем вызове.
17, 18, 19, 20 не помню даже близко что это такое
21 тоже знаком через призму js. try{пробуем} catch{не вышло} finaly{после в любом случае исполняем это} trow - тригер отправки в catch блок
22 хз
23 по сути это вызываемая вручную, искуственная инкапсуляция. для защиты от случайного использования разных переменных с одинаковым названием.
24 45 не знаком с php8
25 взаимодействие через $_SESSION, но не работал с ними вообще
26 session, post, get, request, coocie. get post & request для обработки URI
27 с окончанием once - вызывается единожды(блокируется повторный вызов), include - исполнение кода на месте и после вставка результата его исполнения, require - вставка кода и после продолжение исполнения основного файла(того в который вставляем) вместе с этим кодом.
28 29 30 31 32 хз
33 вроде читал, но не помню
34 35 хз
36 model view controller. дробление кода на 3 независимые куска логики. модель - по сути эдакая бд, вью - для вывода(output), котроллер для управления/ввода(input)
37 38 ничего
39 не слышал об этом
40 оркестратор вроде. крч одна из частей в современной системе виртуализации но не самостоятельная.
41 lamp - готовая сборка из нескольких серверов. лампы которые использовал - denwer, open server. про namp не слышал
42 регулярки это боль... с их помощью составляются шаблоны для обработки текста, например ЧПУ в mod_rewrite
43 насколько понимаю это протокол для управления *nix системой(не работал с ним)
44 модуль для бесшевного управления БД разных видов. разные бд имеют разный SQL синтаксис, PDO нивелирует различия между ними. но честности ради, я не работал с PDO
45 & 24 не знаком с php8
46 хз даже
47 get - чтение, post - создание
48 update - обновление, но конечно использовал только первые 2(get, post)
49 break - остановка цикла. continue - пропуск текущей итерации и переход к следующей
50 $i = 1; echo 'одинарные $i непробиваемы '. "двойные $i пробиваемые";
// одинарные $i непробиваемы двойные 1 пробиваемые
51 хранилище на фронте, в основном для хранения авторизационных токенов, больше туда мало что поместится, да и более емких альтернатив им нынче хватает - Local Storage \ IndexedDB
52 что то большое в силу малого объема
53 notepad++. весь мой стэк: php, js, css, html - некомпилируемые языки, и все они кроме пыха с нулевой точкой входа(среда исполнения интегрирована во всех вменяемых ОС)
55 56 57. командами не пользуюсь, только гуй вэб морды
58 защищенная правка. если в двух словах каждая транзакция сопровождается рядом подтверждений об успехе, отсутствие любого из которых откатывает изменения к исходному состоянию.
59 60 61 62 63 64 65 66 67 68 хз
69 если правильно понял, переход из одной бд в другую с полным переносом данных.
70 71 хз
72 нууу... как минимум в том, что про having я даже не слышал =) where указывает где искать(на таблицу или столбец уже не помню)
73 74 хз
75 таймштамп int число которое "компилируется" в человеко-понятную дату. datatime кмк и есть человеко-понятный тип времени, но не уверен.
76 77 78 хз
79 SQL - язык запросов к БД, NoSQL соотвественно БД с которой посредством такого языка не по взаимодествуешь. если не ошибаюсь большая часть NoSQL баз юзаются как обычный ассоц массив.
80 слышал про memchached и redis но не юзал даже их.
81 хз... если ничего не путаю, там чуть ли не под каждую кодировку текста отдельный тип(сужу по опыту с MySql & PhpMyAdmin)
82 83 84 85 86 хз

middle
5 xss экранированием всего и вся
13  "общепринятые" стандарты кодинга нацеленные на создание универсального кода, который можно будет хоть как то поддерживать.
15 nosql БД
16 как в ассоц массиве, ключ-значение
22 в 7 нло прикольное и двойной вопрос, пожалуй всё что помню)
30 переменные из ассемблеровского уровня абстракции
47 если память не изменяет её разработку бросили и решили начать перерабатывать 5ку заново.
66 для отказоустойчивости. если сервак упадет при использовании обычного запроса данные могут потеряться, в случае с транзакцией откатятся к исходному виду.

senior
14 архитектурное разбиение проекта на несколько частей: микросервисов \ контейнеров \ акторов. если на примере MVC, то каждый из них при такой архитектуре будет находиться на разной как минимум виртуальной машине.
15 в случае с акторами, точно слышал про очереди сообщений.
19 для экономии трафика, времени или времени ЦП, в зависимости от того где именно применяется.
26 плохие примеры, буквально - то как делать НЕ надо.
